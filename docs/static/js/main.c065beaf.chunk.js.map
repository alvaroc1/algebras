{"version":3,"sources":["serviceWorker.ts","parts/Background.tsx","parts/Base.tsx","slides/TitleSlide.tsx","slides/AlgebraDslSlide.tsx","slides/EverywhereSlide.tsx","calculator/buttons.tsx","calculator/index.tsx","slides/CalculatorSlide.tsx","slides/AlgebraSlide.tsx","slides/Algebra2Slide.tsx","slides/CpmSlide.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","curtainStyles","position","top","height","width","boxShadow","background","style","overflow","right","borderRight","transform","left","borderLeft","h1Styles","fontSize","textAlign","color","props","backgroundComp","Background","title","children","styles","boxSizing","fontFamily","padding","SlideData","create","elements","render","Base","places","bank","compiler","list","future","json","finagle","Stepper","states","Object","keys","value","p","marginBottom","code","language","BasicButtons","className","onClick","event","SetCalculations","output","Calculate","CurrentValue","isNaN","ReplaceCurrentValue","PushCalculation","toString","input","evaluate","NaN","ReactCalculator","React","useState","defaultValue","Calculations","ReplaceState","SetReplaceState","ReactCalculatorRef","useRef","length","Buttons","useCallback","newCurrentValue","onChange","prevData","newData","push","PushCurrentValue","HandleKeyDown","keyCode","preventDefault","HandleChange","target","Handle","useMemo","maxColumns","row","ButtonElements","map","cell","colSpan","type","key","tabIndex","gridColumnStart","gridColumnEnd","ref","id","data-haschanged","readOnly","replace","onKeyDown","gridTemplateColumns","calculation","calculator","state","active","margin","introduction","combinators","elimination","all","v","src","alt","Slide","code1","setCode1","useEffect","fetch","then","res","text","ReactDOM","StrictMode","slides","TitleSlide","AlgebraSlide","AlgebraDslSlide","Algebra2Slide","CalculatorSlide","EverywhereSlide","CpmSlide","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c065beaf.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as React from 'react'\n\nconst color1 = 'rgb(30, 40, 82)'\nconst color2 = 'rgb(35, 45, 87)'\nconst shadow = 'rgba(0,0,0,.2)'\nconst angle = '25deg'\n\nconst curtainStyles: React.CSSProperties = {\n  position: 'absolute',\n  top: -350,\n  height: 1250,\n  width: 900,\n  boxShadow: `0 0 100px ${shadow}`,\n  background: color1\n}\n\nexport default () => \n  <div style={{position: 'relative', height: '100%', background: color1, overflow: 'hidden'}}>\n    <div \n      style={{\n      ...curtainStyles,\n      right: 380,\n      borderRight: `140px solid ${color2}`,\n      transform: `rotate(${angle})`\n    }}></div>\n\n    <div \n      style={{\n      ...curtainStyles,\n      left: 380,\n      borderLeft: `160px solid ${color2}`,\n      transform: `rotate(-${angle})`\n    }}></div>\n  </div>","import * as React from 'react'\nimport Slide from '@alvaroc1/present/components/Slide'\nimport Background from './Background'\n\ninterface Props {\n  title?: React.ReactNode,\n  children: React.ReactNode,\n}\n\nconst h1Styles: React.CSSProperties = {\n  fontSize: 50, \n  textAlign: 'center',\n  color: '#fc6986'\n}\n\nexport default (props: Props) => {\n  const backgroundComp = \n    <Background/>\n\n  return (\n    <Slide background={backgroundComp}>\n      {props.title &&\n        <h1 style={h1Styles}>{props.title}</h1>\n      }\n      {props.children}\n    </Slide>\n  )\n}\n","import React from 'react'\nimport SlideData from '@alvaroc1/present/components/SlideData'\nimport Center from '@alvaroc1/present/layout/Center'\nimport Base from '../parts/Base'\nimport 'typeface-montserrat'\n\nconst styles: React.CSSProperties = {\n  boxSizing: 'border-box',\n  fontFamily: 'Montserrat',\n  fontSize: 70,\n  padding: 30,\n  textAlign: 'center'\n}\n\nexport default SlideData.create({\n  elements: {},\n  render: elements => \n    <Base>\n      <Center>\n        <h1 style={styles}>Algebras</h1>\n      </Center>\n    </Base>\n})","import React from 'react'\nimport SlideData from '@alvaroc1/present/components/SlideData'\nimport Center from '@alvaroc1/present/layout/Center'\nimport Base from '../parts/Base'\nimport 'typeface-montserrat'\n\nexport default SlideData.create({\n  elements: {},\n  render: elements => \n    <Base title='Algebra ≈ DSL'>\n      <div>\n      <Center>\n        <div style={{width: 500, fontSize: 35}}>\n        <p><b>Algebra:</b><br/> Symbols and the rules for manipulating them.</p>\n        <p><b>Domain Specific Language:</b><br/> Language specialized to a particular application domain.</p>\n\n      </div>\n      </Center>\n      </div>\n    </Base>\n})\n","import React from 'react'\nimport SlideData from '@alvaroc1/present/components/SlideData'\nimport Center from '@alvaroc1/present/layout/Center'\nimport Base from '../parts/Base'\nimport 'typeface-montserrat'\nimport Stepper from '@alvaroc1/present/components/Stepper'\nimport Snippet from '@alvaroc1/present/components/Snippet'\n\ntype Place = [string,string,string,string,string,string]\n\nconst places = {\n  bank: [\n    'Bank Transactions',\n    'Money, Accounts, Balances',\n    'Deposits: Dollar bills, coins, checks',\n    'Transfers, bill pay, interest, loans, investments',\n    'Withdrawals',\n    'lisp'\n  ] as Place,\n  compiler: [\n    'Compiler',\n    'Abstract Syntax Tree',\n    'Parsing source code',\n    'Analyisis, optimization, etc',\n    'Compilation to binary',\n    'lisp',\n  ] as Place,\n  list: [\n    'Scala List',\n    'List[A]',\n    'List.apply, Nil, List.empty, etc',\n    '++, .map, .flatMap, .partition',\n    '.head, .foldLeft, .size, .sum',\n    'scala'\n  ] as Place,\n  future: [\n    'Future',\n    'Future[A]',\n    'Future.successful, Future.apply, Future.failed',\n    '.map, .flatMap, .zip, Future.sequence',\n    'Await.result',\n    'scala'\n  ],\n  json: [\n    'Argonaut JSON', \n    'DecodeJson[A]',\n    'DecodeJson.apply, DecodeJson.derive',\n    '.map, .flatMap, .widen',\n    '.decode, .decodeOpt',\n    'scala'\n  ] as Place,\n  finagle: [\n    'Twitter Finagle',\n    'Filter, Service',\n    'Filter.mk, Service.mk, Filter.identity, Filter.choose',\n    '.andThen, .andThenIf, .rescue',\n    '.apply, .close',\n    'scala'\n  ]\n} as const\n\nexport default SlideData.create({\n  elements: {\n    places: Stepper.states<keyof typeof places>(Object.keys(places) as unknown as (keyof typeof places)[], value => {\n      const p = places[value]\n      return (\n        <div>\n        <Center>\n        <div style={{width: 600}}>\n          <h1>Algebra: {p[0]}</h1>\n          <h3 style={{marginBottom: -15}}>Concepts</h3>\n          <p><Snippet code={p[1]} language={p[5]} /></p>\n\n          <h3 style={{marginBottom: -15}}>Introduction Forms</h3>\n          <p><Snippet code={p[2]} language={p[5]}/></p>\n\n          <h3 style={{marginBottom: -15}}>Combinators</h3>\n          <p><Snippet code={p[3]} language={p[5]}/></p>\n\n          <h3 style={{marginBottom: -15}}>Elimination Forms</h3>\n          <p><Snippet code={p[4]} language={p[5]}/></p>\n        </div>\n        </Center>\n        </div>\n      )\n    })\n  },\n  render: elements => \n    <Base title='Algebras are Everywhere'>\n      {elements.places}\n    </Base>\n})","import { CalculatorButton, Calculate } from './index';\n\nexport const Number0Button:CalculatorButton = {\n    className: 'Number0Button Introduction',\n    children: '0',\n    value: '0'\n};\n\nexport const Number1Button:CalculatorButton = {\n    className: 'Number1Button Introduction',\n    children: '1',\n    value: '1'\n};\n\nexport const Number2Button:CalculatorButton = {\n    className: 'Number2Button Introduction',\n    children: '2',\n    value: '2'\n};\n\nexport const Number3Button:CalculatorButton = {\n    className: 'Number3Button Introduction',\n    children: '3',\n    value: '3'\n};\n\nexport const Number4Button:CalculatorButton = {\n    className: 'Number4Button Introduction',\n    children: '4',\n    value: '4'\n};\n\nexport const Number5Button:CalculatorButton = {\n    className: 'Number5Button Introduction',\n    children: '5',\n    value: '5'\n};\n\nexport const Number6Button:CalculatorButton = {\n    className: 'Number6Button Introduction',\n    children: '6',\n    value: '6'\n};\n\nexport const Number7Button:CalculatorButton = {\n    className: 'Number7Button Introduction',\n    children: '7',\n    value: '7'\n};\n\nexport const Number8Button:CalculatorButton = {\n    className: 'Number8Button Introduction',\n    children: '8',\n    value: '8'\n};\n\nexport const Number9Button:CalculatorButton = {\n    className: 'Number9Button Introduction',\n    children: '9',\n    value: '9'\n};\n\nexport const DecimalButton:CalculatorButton = {\n    className: 'DecimalButton Introduction',\n    children: '.',\n    value: '.'\n}\n\nexport const DivisionButton:CalculatorButton = {\n    className: 'DivisionButton Combinator',\n    children: '÷',\n    value: ' / '\n};\n\nexport const MultiplicationButton:CalculatorButton = {\n    className: 'MultiplicationButton Combinator',\n    children: '×',\n    value: ' * '\n};\n\nexport const SubtractionButton:CalculatorButton = {\n    className: 'SubtractionButton Combinator',\n    children: '-',\n    value: ' - '\n};\n\nexport const AdditionButton:CalculatorButton = {\n    className: 'AdditionButton Combinator',\n    children: '+',\n    value: ' + '\n};\n\nexport const OpenParenthesisButton:CalculatorButton = {\n    className: 'OpenParenthesisButton Introduction',\n    children: '(',\n    value: '('\n};\n\nexport const ClosedParenthesisButton:CalculatorButton = {\n    className: 'ClosedParenthesisButton Introduction',\n    children: ')',\n    value: ')'\n};\n\nexport const ClearButton:CalculatorButton = {\n    className: 'ClearButton Elimination',\n    children: 'C',\n    onClick: event => {\n        event.SetCalculations(['']);\n    }\n};\n\nexport const EqualsButton:CalculatorButton = {\n    className: 'EqualsButton Elimination',\n    children: '=',\n    onClick: event => {\n        const output = Calculate(event.CurrentValue);\n        if (isNaN(output)) {\n            event.ReplaceCurrentValue('Invalid operation');\n        }\n        else {\n            event.PushCalculation(output.toString())\n        }\n    }\n};\n\nexport const BasicButtons:CalculatorButton[][] = [\n    [\n        Number7Button,\n        Number8Button,\n        Number9Button,\n        OpenParenthesisButton,\n        ClosedParenthesisButton,\n    ],\n    [\n        Number4Button,\n        Number5Button,\n        Number6Button,\n        MultiplicationButton,\n        DivisionButton,\n    ],\n    [\n        Number1Button,\n        Number2Button,\n        Number3Button,\n        AdditionButton,\n        SubtractionButton,\n    ],\n    [\n        ClearButton,\n        Number0Button,\n        DecimalButton,\n        EqualsButton,\n    ]\n];","import React from 'react'\nimport { evaluate } from 'mathjs'\nimport { BasicButtons } from './buttons'\nimport './style.css'\n\nexport interface CalculatorButton {\n    value?: string;\n    children: React.ReactNode;\n    title?: string;\n    onClick?(event: ReactCalculatorHandle): void;\n    className?: string;\n}\n\nexport interface ReactCalculatorHandle {\n    Calculations: string[];\n    SetCalculations: React.Dispatch<React.SetStateAction<string[]>>;\n    PushCalculation(newCurrentValue: string): void;\n    CurrentValue: string;\n    ReplaceCurrentValue(newCurrentValue: string): void;\n    PushCurrentValue(value: string): void;\n};\n\nexport interface ReactCalculatorProps {\n    className?: string;\n    id?: string;\n    Buttons?: CalculatorButton[][];\n    defaultValue?: string;\n    onChange?: (v: string) => void\n};\n\nexport const Calculate = (input:string):number => {\n    try {\n        const result = evaluate(input);\n        return result;\n    }\n    catch {\n        return NaN;\n    }\n};\n\nexport function ReactCalculator(props:ReactCalculatorProps) {\n    const [ Calculations, SetCalculations ] = React.useState<string[]>([props.defaultValue || '']);\n    const [ ReplaceState, SetReplaceState ] = React.useState(false); // Pressing a key overwrites the value\n\n    const ReactCalculatorRef = React.useRef<HTMLDivElement>(null);\n\n    const CurrentValue = Calculations[Calculations.length - 1];\n    const Buttons = props.Buttons || BasicButtons;\n\n    let className = 'ReactCalculator';\n    if (props.className) {\n        className += ' ' + props.className;\n    }\n\n    const PushCalculation = React.useCallback((newCurrentValue:string) => {\n        const {onChange} = props\n        if (onChange) onChange(newCurrentValue)\n\n        SetCalculations(prevData => {\n            const newData = [ ...prevData ];\n            newData.push(newCurrentValue);\n            return newData;\n        });\n\n        SetReplaceState(false);\n    }, [props]);\n\n    const ReplaceCurrentValue = React.useCallback((newCurrentValue:string) => {\n        SetCalculations(prevData => {\n            const newData = [ ...prevData ];\n            newData[newData.length - 1] = newCurrentValue;\n            return newData;\n        });\n\n        SetReplaceState(false);\n    }, []);\n\n    const PushCurrentValue = React.useCallback((value:string) => {\n        SetCalculations(prevData => {\n            const newData = [ ...prevData ];\n            newData[newData.length - 1] += value;\n            return newData;\n        });\n        \n        SetReplaceState(false);\n    }, []);\n\n    const HandleKeyDown = React.useCallback((event:React.KeyboardEvent<HTMLInputElement>) => {\n        if (event.keyCode === 13) {\n            event.preventDefault();\n\n            const output = Calculate(CurrentValue);\n            if (isNaN(output)) {\n                ReplaceCurrentValue('Invalid operation');\n            }\n            else {\n                PushCalculation(output.toString());\n            }\n        }\n\n        return false;\n    }, [CurrentValue, PushCalculation, ReplaceCurrentValue]);\n\n    const HandleChange = React.useCallback((event:React.ChangeEvent<HTMLInputElement>) => {\n        ReplaceCurrentValue(event.target.value);\n    }, [ReplaceCurrentValue]);\n\n    const Handle = React.useMemo(():ReactCalculatorHandle => {\n        return {\n            Calculations,\n            SetCalculations,\n            PushCalculation,\n            CurrentValue,\n            ReplaceCurrentValue,\n            PushCurrentValue\n        };\n    }, [Calculations, CurrentValue, PushCalculation, PushCurrentValue, ReplaceCurrentValue]);\n\n    let maxColumns = 0;\n    for (let row of Buttons) {\n        if (maxColumns < row.length) {\n            maxColumns = row.length;\n        }\n    }\n\n    const ButtonElements = React.useMemo(() => {\n        return Buttons.map(row => {\n            return row.map(cell => {\n                let colSpan = 1;\n                if (cell === row[row.length - 1]) {\n                    colSpan = (maxColumns - row.length) + 1;\n                }\n\n                return (\n                    <button\n                        type='button'\n                        key={ cell.value || cell.className }\n                        className={ cell.className }\n                        title={ cell.title }\n                        tabIndex={ -1 }\n                        style={{\n                            gridColumnStart: 'auto',\n                            gridColumnEnd: `span ${ colSpan }`\n                        }}\n                        onClick={ () => {\n                            if (cell.onClick) {\n                                cell.onClick(Handle);\n                            }\n                            if (cell.value) {\n                                PushCurrentValue(cell.value);\n                            }\n                        }}\n                    >{ cell.children }</button>\n                );\n            });\n        });\n    }, [Buttons, Handle, PushCurrentValue, maxColumns]);\n\n    return (\n        <div\n            ref={ ReactCalculatorRef }\n            id={ props.id }\n            className={ className }\n            data-haschanged={ ReplaceState }\n        >\n\n            <input\n                readOnly\n                className='InputPane'\n                value={ CurrentValue.replace('*', '×').replace('/', '÷') }\n                onKeyDown={ HandleKeyDown }\n                onChange={ HandleChange }\n            />\n\n            <div\n                className='ButtonPane'\n                style={{\n                    gridTemplateColumns: `repeat(${ maxColumns }, 1fr)`\n                }}\n            >\n                { ButtonElements }\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport SlideData from '@alvaroc1/present/components/SlideData'\nimport Center from '@alvaroc1/present/layout/Center'\nimport Base from '../parts/Base'\nimport { ReactCalculator } from '../calculator'\nimport 'typeface-montserrat'\nimport Stepper from '@alvaroc1/present/components/Stepper'\n\nlet calculation = ''\n\nexport default SlideData.create({\n  elements: {\n    calculator: Stepper.states(['introduction' as const, 'combinators' as const, 'elimination' as const, 'all' as const], (state, active) =>\n      <div>\n        <h2 style={{textAlign: 'center', margin: '10px 0'}}>\n        {active ? \n          ({introduction: 'Introduction Forms', combinators: 'Combinators', elimination: 'Elimination Forms', all: '\\u00a0'})[state] :\n          'Calculator'\n        }\n        </h2>\n        <ReactCalculator className={`highlight-${active ? state : 'none'}`} defaultValue={calculation} onChange={v => calculation = v}/>\n      </div>\n    )\n  },\n  render: elements => \n    <Base>\n        <Center>\n          {elements.calculator}\n        </Center>\n    </Base>\n})","import React from 'react'\nimport SlideData from '@alvaroc1/present/components/SlideData'\nimport Center from '@alvaroc1/present/layout/Center'\nimport Base from '../parts/Base'\nimport 'typeface-montserrat'\n\nexport default SlideData.create({\n  elements: {},\n  render: elements => \n    <Base title='Algebra'>\n      <div>\n      <Center>\n        <div style={{textAlign: 'center'}}>\n        <h2><b>Symbols</b> and the <b>Rules</b> for manipulating them</h2>\n        <img src='algebra.png' alt=''/>\n        </div>\n      </Center>\n      </div>\n    </Base>\n})","import React from 'react'\nimport SlideData from '@alvaroc1/present/components/SlideData'\nimport Base from '../parts/Base'\nimport 'typeface-montserrat'\n\nexport default SlideData.create({\n  elements: {},\n  render: elements => \n    <Base title='Algebra'>\n      <div>\n        <ul style={{fontSize: 30, margin: '0 30px'}}>\n          <li style={{marginBottom: 14}}>\n            <b>Concepts</b>:\n            Represent domain-specific concepts. They encapsulate and hide implementation details.\n          </li>\n          <li style={{marginBottom: 14}}>\n            <b>Introduction Forms</b>:\n            Allow us to create the domain specific context. To enter the algebra.\n          </li>\n          <li style={{marginBottom: 14}}>\n            <b>Combinators</b>:\n            Allow us to work within the algebra, unburdened by implementation details.\n          </li>\n          <li style={{marginBottom: 14}}>\n            <b>Elimination Forms</b><br/>\n            Collapse the concepts. Exit the algebra.\n          </li>\n        </ul>\n      </div>\n    </Base>\n})","import React from 'react'\nimport SlideData from '@alvaroc1/present/components/SlideData'\nimport Snippet from '@alvaroc1/present/components/Snippet'\nimport Base from '../parts/Base'\nimport 'typeface-montserrat'\n\ntype Props = {\n\n}\n\nconst Slide = (props: Props) => {\n  const [code1,setCode1] = React.useState('')\n  //const [code2,setCode2] = React.useState('')\n\n  React.useEffect(() => {\n    fetch('snippets/cpm1.sc').then(res => res.text()).then(code => setCode1(code))\n    //fetch('snippets/cpm2.sc').then(res => res.text()).then(code => setCode2(code))\n  })\n  return (\n    <Base title='CPM'>\n      <Snippet code={code1} language='scala' fontSize={14}/>\n    </Base>\n  )\n}\n\nexport default SlideData.create({\n  elements: {},\n  render: elements => <Slide />\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\nimport Deck from '@alvaroc1/present/components/Deck'\nimport TitleSlide from './slides/TitleSlide'\nimport AlgebraDslSlide from './slides/AlgebraDslSlide'\nimport EverywhereSlide from './slides/EverywhereSlide'\nimport CalculatorSlide from './slides/CalculatorSlide'\nimport AlgebraSlide from './slides/AlgebraSlide'\nimport Algebra2Slide from './slides/Algebra2Slide'\nimport CpmSlide from './slides/CpmSlide'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Deck slides={[\n      TitleSlide,\n      AlgebraSlide,\n      AlgebraDslSlide,\n      Algebra2Slide,\n      CalculatorSlide,\n      EverywhereSlide,\n      CpmSlide\n    ]}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}